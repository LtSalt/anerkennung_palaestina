---
title: "Explore"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
if(!"pacman" %in% installed.packages()) install.packages("pacman")
pacman::p_load(tidyverse, plotly)
```


```{r}
states <- read_csv("data/processed/states.csv")
```

```{r}
states %>% 
  mutate(state = fct_reorder(as.factor(state), date)) %>% 
  mutate(date = replace_na(date, 2025)) %>% 
  ggplot() +
  geom_point(aes(x = state, y = date, color = recognizes),
             size = 0.4) +
  geom_segment(aes(x = state, xend = state, 
                   y = date, yend = 2025,
                   color = recognizes)) +
  geom_segment((aes(x = state, xend = state,
                    y = 1988, yend = date))) +
  geom_hline(yintercept = 2023, linetype = "dashed", linewidth = 0.2) +
  scale_color_manual(values = c("grey", "blue")) +
  scale_y_reverse() +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.ticks = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank(),
        legend.position = "none") +
  labs(x = NULL,
       y = "Datum",
       color = NULL)

p
ggplotly(p)
```

```{r}
states %>% 
  mutate(state = fct_reorder(as.factor(state), date)) %>% 
  mutate(date = replace_na(date, 2025)) %>% 
  ggplot() +
  geom_point(aes(x = state, y = 2025, color = recognizes),
             size = 0.6) +
  geom_segment(aes(x = state, xend = state, 
                   y = date, yend = 2025,
                   color = recognizes)) +
  geom_segment(aes(x = state, xend = state,
                    y = 1988, yend = date),
                color = "grey") +
  geom_hline(yintercept = 2023, linetype = "dashed", linewidth = 0.2) +
  scale_color_manual(values = c("grey", "blue")) +
  scale_y_reverse() +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.ticks = element_blank(),
        panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank(),
        legend.position = "none") +
  labs(x = NULL,
       y = "Datum",
       color = NULL)
```



```{r}
states %>% 
  filter(eu28) %>%
  count(recognizes)
```

```{r}
states %>% 
  mutate(diff = 1988 - date)
```


```{r}
nrow(states)
years <- tibble(year = seq(1988, 2025, 1))

recognition_time <- states %>% 
  filter(!is.na(date)) %>% 
  count(date) %>% 
  full_join(years, by = c("date" = "year")) %>% 
  arrange(date) %>% 
  mutate(n = replace_na(n, 0),
         sum = accumulate(n, sum)) %>% 
  select(-n)

write_csv(recognition_time, "data/processed/recognition_time.csv")
```

```{r}
counter <- recognition_time %>% 
  rename(pro = sum) %>% 
  mutate(con = 192 - pro) 
  # pivot_longer(pro:con, names_to = "stance", values_to = "n")

write_csv(counter, "data/processed/counter.csv")
```

```{r}
n_continent <- states %>% 
  count(continent, name = "total")

date_continent <- expand_grid(continent = n_continent$continent, 
            year = years$year)
  
by_continent <- states %>% 
  filter(!is.na(date)) %>% 
  count(continent, date) %>% 
  full_join(date_continent, by = c("date" = "year", "continent")) %>% 
  full_join(n_continent, by ="continent") %>% 
  arrange(continent, date) %>% 
  group_by(continent) %>% 
  mutate(n = replace_na(n, 0),
         sum = accumulate(n, sum),
         share = round(sum / total, 4)) %>% 
  select(continent, 
         date,
         total,
         pro = sum,
         share) %>% 
  ungroup()

write_csv(by_continent, "data/processed/by_continent.csv")

by_continent_dw <- by_continent %>% 
  reframe(continent, 
          date, 
          pct = round(share * 100, 4)) %>% 
  pivot_wider(names_from = continent, values_from = pct)

view(by_continent_dw)

write_csv(by_continent_dw, "data/processed/by_continent_dw.csv")
```













